-- Package Graphe
-- G√®re le stockage et la manipulation de graphes orient√©s.

-- G√©n√©ricit√© :
-- Les sommets et les ar√™tes sont √©tiquet√©s par les √©l√©ments des types
-- T_Etiquette_Sommet et T_Etiquette_Arete
generic
   type T_Etiquette_Sommet is private;
   type T_Etiquette_Arete is private;
package Graphe is

   -- Type accessibles de l'ext√©rieur : le graphe et la liste d'adjacence,
   -- pour explorer les ar√™tes sortant d'un sommet
   type T_Graphe is limited private;
   type T_Liste_Adjacence is limited private;

   -- Type public pour la lecture de la liste d'adjacence
   type T_Arete_Etiquetee is record
      Etiquette   : T_Etiquette_Arete;
      Destination : T_Etiquette_Sommet;
   end record;

   -- Exceptions : une √©tiquette donn√©e ne correspond √  aucun sommet
   Sommet_Non_Trouve : exception;
   -- La liste donn√©e est vide
   Vide : exception;

   -- ! Debug
   procedure Pouet;

   -- Initialise un graphe vide.
   procedure Initialiser (Graphe : out T_Graphe);

   -- Lib√®re l'espace m√©moire occup√© par un graphe.
   procedure Detruire (Graphe : in out T_Graphe);

   -- Ajoute un sommet au graphe avec l'√©tiquette donn√©e.
   procedure Ajouter_Sommet
     (Graphe : in out T_Graphe; Etiquette : T_Etiquette_Sommet);

   -- Ajoute une ar√™te entre deux sommets donn√©s.
   procedure Ajouter_Arete
     (Graphe    : in out T_Graphe; Origine : in T_Etiquette_Sommet;
      Etiquette : in T_Etiquette_Arete; Destination : in T_Etiquette_Sommet);

   -- Renvoie la liste des ar√™tes sortant du sommet donn√©.
   procedure Chaine_Adjacence
     (Adjacence :    out T_Liste_Adjacence; Graphe : in T_Graphe;
      Origine   : in     T_Etiquette_Sommet);

   -- Renvoie vrai si on peut continuer √  it√©rer.
   function Adjacence_Non_Vide (Adjacence : T_Liste_Adjacence) return Boolean;

   -- Lit l'ar√™te suivante et avance la lecture.
   procedure Arete_Suivante
     (Adjacence : in out T_Liste_Adjacence; Arete : out T_Arete_Etiquetee);

   procedure Supprimer_Arete
     (Graphe          : in T_Graphe; Origine : in T_Etiquette_Sommet;
      Etiquette_Arete : in T_Etiquette_Arete;
      Destination     : in T_Etiquette_Sommet);

   function Indiquer_Sommet_Existe
     (Graphe : T_Graphe; Etiquette : T_Etiquette_Sommet) return Boolean;

   function Est_Vide (Graphe : T_Graphe) return Boolean;
private

   -- Un graphe est repr√©sent√© par une liste cha√Æn√©e de sommets
   -- et les ar√™tes par une liste cha√Æn√©e aussi

   type T_Sommet;
   type T_Arete;

   type T_Graphe is access T_Sommet;
   type T_Liste_Adjacence is access T_Arete;

   type T_Sommet is record
      Etiquette : T_Etiquette_Sommet;
      Arete     : T_Liste_Adjacence;
      Suivant   : T_Graphe;
   end record;

   type T_Arete is record
      Etiquette   : T_Etiquette_Arete;
      Destination : T_Graphe;
      Suivante    : T_Liste_Adjacence;
   end record;

end Graphe;
